// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyAssistant.Persistence;

#nullable disable

namespace MyAssistant.Persistence.Migrations
{
    [DbContext(typeof(MyAssistantDbContext))]
    [Migration("20250707214354_recurrence")]
    partial class recurrence
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyAssistant.Domain.Base.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActionTypeCode")
                        .HasColumnType("int");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MyAssistantServiceTypeCode")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShoppingListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingListId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("MyAssistant.Domain.Base.EntityShare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BillingInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HabitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionTypeCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("SharedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SharedWithUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ShoppingListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BillingInfoId");

                    b.HasIndex("GoalId");

                    b.HasIndex("HabitId");

                    b.HasIndex("PermissionTypeCode");

                    b.HasIndex("ShoppingListId");

                    b.HasIndex("TaskItemId");

                    b.HasIndex("EntityId", "EntityType", "SharedWithUserId")
                        .IsUnique();

                    b.ToTable("EntityShare");
                });

            modelBuilder.Entity("MyAssistant.Domain.Base.HistoryEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewValue")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("OldValue")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.ToTable("HistoryEntries");
                });

            modelBuilder.Entity("MyAssistant.Domain.Base.MyAssistantServiceLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MyAssistantServiceTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("ResultDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MyAssistantServiceTypeCode");

                    b.ToTable("MyAssistantServiceLog");
                });

            modelBuilder.Entity("MyAssistant.Domain.Lookups.AuditActionType", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.ToTable("AuditActionTypes");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Description = "Create"
                        },
                        new
                        {
                            Code = 2,
                            Description = "Update"
                        },
                        new
                        {
                            Code = 3,
                            Description = "Delete"
                        });
                });

            modelBuilder.Entity("MyAssistant.Domain.Lookups.MyAssistantServiceType", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.ToTable("MyAssistantServiceType");
                });

            modelBuilder.Entity("MyAssistant.Domain.Lookups.PermissionType", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.ToTable("PermissionTypes");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Description = "Read"
                        },
                        new
                        {
                            Code = 2,
                            Description = "Read/Write"
                        },
                        new
                        {
                            Code = 3,
                            Description = "Read/Write/Delete"
                        });
                });

            modelBuilder.Entity("MyAssistant.Domain.Lookups.RecurrenceType", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.ToTable("RecurrenceTypes");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Description = "None"
                        },
                        new
                        {
                            Code = 2,
                            Description = "Hourly"
                        },
                        new
                        {
                            Code = 3,
                            Description = "Daily"
                        },
                        new
                        {
                            Code = 4,
                            Description = "Weekly"
                        },
                        new
                        {
                            Code = 5,
                            Description = "Monthly"
                        },
                        new
                        {
                            Code = 6,
                            Description = "Annually"
                        });
                });

            modelBuilder.Entity("MyAssistant.Domain.Lookups.ShoppingItemActivityType", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.ToTable("ShoppingItemActivityTypes");

                    b.HasData(
                        new
                        {
                            Code = 1,
                            Description = "Active"
                        },
                        new
                        {
                            Code = 2,
                            Description = "Inactive"
                        },
                        new
                        {
                            Code = 3,
                            Description = "Urgent"
                        },
                        new
                        {
                            Code = 4,
                            Description = "NotUrgent"
                        });
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.BillingInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HabitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParentEntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("HabitId");

                    b.HasIndex("ParentEntityId");

                    b.ToTable("BillingInfo");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ReceiverUserId", "SentAt");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsAchieved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Goal");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.Habit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GoalValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<Guid?>("RecurrenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("RecurrenceId");

                    b.ToTable("Habit");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("EmailNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ObjectType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.Recurrence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<int>("RecurrenceTypeCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecurrenceTypeCode");

                    b.ToTable("Recurrence");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.ShoppingList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ShoppingList");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.ShoppingListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("RecurrenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoppingListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecurrenceId");

                    b.HasIndex("ShoppingListId");

                    b.ToTable("ShoppingListItem");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.TaskItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("RecurrenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("RecurrenceId");

                    b.ToTable("TaskItem");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.UserConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RequestSentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<string>("StatusMessage")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "FriendUserId")
                        .IsUnique();

                    b.ToTable("UserConnection");
                });

            modelBuilder.Entity("MyAssistant.Domain.Base.AuditLog", b =>
                {
                    b.HasOne("MyAssistant.Domain.Models.ShoppingList", null)
                        .WithMany("AuditLogs")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("MyAssistant.Domain.Base.EntityShare", b =>
                {
                    b.HasOne("MyAssistant.Domain.Models.BillingInfo", null)
                        .WithMany("Shares")
                        .HasForeignKey("BillingInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyAssistant.Domain.Models.Goal", null)
                        .WithMany("Shares")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MyAssistant.Domain.Models.Habit", null)
                        .WithMany("Shares")
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MyAssistant.Domain.Lookups.PermissionType", "PermissionType")
                        .WithMany()
                        .HasForeignKey("PermissionTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyAssistant.Domain.Models.ShoppingList", null)
                        .WithMany("Shares")
                        .HasForeignKey("ShoppingListId");

                    b.HasOne("MyAssistant.Domain.Models.TaskItem", null)
                        .WithMany("Shares")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PermissionType");
                });

            modelBuilder.Entity("MyAssistant.Domain.Base.HistoryEntry", b =>
                {
                    b.HasOne("MyAssistant.Domain.Base.AuditLog", null)
                        .WithMany("HistoryEntries")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyAssistant.Domain.Base.MyAssistantServiceLog", b =>
                {
                    b.HasOne("MyAssistant.Domain.Lookups.MyAssistantServiceType", "MyAssistantServiceType")
                        .WithMany()
                        .HasForeignKey("MyAssistantServiceTypeCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MyAssistantServiceType");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.BillingInfo", b =>
                {
                    b.HasOne("MyAssistant.Domain.Models.Goal", null)
                        .WithMany("Bills")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MyAssistant.Domain.Models.Habit", null)
                        .WithMany("Bills")
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MyAssistant.Domain.Models.ShoppingList", null)
                        .WithMany("Bills")
                        .HasForeignKey("ParentEntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.Habit", b =>
                {
                    b.HasOne("MyAssistant.Domain.Models.Goal", "LinkedGoal")
                        .WithMany("LinkedHabits")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MyAssistant.Domain.Models.Recurrence", "Recurrence")
                        .WithMany()
                        .HasForeignKey("RecurrenceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("LinkedGoal");

                    b.Navigation("Recurrence");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.Recurrence", b =>
                {
                    b.HasOne("MyAssistant.Domain.Lookups.RecurrenceType", "RecurrenceType")
                        .WithMany()
                        .HasForeignKey("RecurrenceTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecurrenceType");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.ShoppingListItem", b =>
                {
                    b.HasOne("MyAssistant.Domain.Models.Recurrence", "Recurrence")
                        .WithMany()
                        .HasForeignKey("RecurrenceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MyAssistant.Domain.Models.ShoppingList", "ShoppingList")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recurrence");

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.TaskItem", b =>
                {
                    b.HasOne("MyAssistant.Domain.Models.Goal", "LinkedGoal")
                        .WithMany("LinkedTasks")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MyAssistant.Domain.Models.Recurrence", "Recurrence")
                        .WithMany()
                        .HasForeignKey("RecurrenceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("LinkedGoal");

                    b.Navigation("Recurrence");
                });

            modelBuilder.Entity("MyAssistant.Domain.Base.AuditLog", b =>
                {
                    b.Navigation("HistoryEntries");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.BillingInfo", b =>
                {
                    b.Navigation("Shares");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.Goal", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("LinkedHabits");

                    b.Navigation("LinkedTasks");

                    b.Navigation("Shares");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.Habit", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Shares");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.ShoppingList", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Bills");

                    b.Navigation("Items");

                    b.Navigation("Shares");
                });

            modelBuilder.Entity("MyAssistant.Domain.Models.TaskItem", b =>
                {
                    b.Navigation("Shares");
                });
#pragma warning restore 612, 618
        }
    }
}
